{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\PC\\\\frontend\\\\src\\\\components\\\\ItemList.js\";\n// Import necessary libraries\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ItemListComponent extends Component {\n  // This is like the blueprint for your special puzzle piece\n\n  constructor(props) {\n    super(props);\n\n    // Initialize state to store data from the backend\n    this.state = {\n      items: [],\n      // This is where we'll store the list of items\n      loading: true,\n      // This tells us whether we're still waiting for data\n      error: null // This will store any error that might occur\n    };\n  }\n\n  // When our special puzzle piece is put on the webpage\n  componentDidMount() {\n    // Fetch data from the backend when the component appears on the webpage\n    this.fetchItems();\n  }\n\n  // Function to fetch items from the backend\n  fetchItems() {\n    // Update state to show loading state\n    this.setState({\n      loading: true\n    });\n\n    // Make a GET request to the backend API using Axios\n    axios.get('http://localhost:9999/api/volunteers/volunteers').then(response => {\n      // Update state with data from the backend\n      this.setState({\n        items: response.data,\n        // Store the list of items\n        loading: false,\n        // No longer loading because we got the data\n        error: null // No errors, everything went smoothly\n      });\n    }).catch(error => {\n      // Handle errors and update state accordingly\n      this.setState({\n        items: [],\n        // No items because there was an error\n        loading: false,\n        // Not loading anymore\n        error: 'Error fetching items from the backend.' // Store the error message\n      });\n    });\n  }\n\n  // When our special puzzle piece is told to show itself on the webpage\n  render() {\n    const {\n      items,\n      loading,\n      error\n    } = this.state;\n\n    // If we're still waiting for data, show a loading message\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }, this);\n    }\n\n    // If there's an error, show an error message\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 14\n      }, this);\n    }\n\n    // If everything is good, show the list of items\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Item List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.name\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ItemListComponent;","map":{"version":3,"names":["React","Component","axios","jsxDEV","_jsxDEV","ItemListComponent","constructor","props","state","items","loading","error","componentDidMount","fetchItems","setState","get","then","response","data","catch","render","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","id"],"sources":["E:/Projects/PC/frontend/src/components/ItemList.js"],"sourcesContent":["// Import necessary libraries\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass ItemListComponent extends Component {\r\n  // This is like the blueprint for your special puzzle piece\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initialize state to store data from the backend\r\n    this.state = {\r\n      items: [],       // This is where we'll store the list of items\r\n      loading: true,   // This tells us whether we're still waiting for data\r\n      error: null,     // This will store any error that might occur\r\n    };\r\n  }\r\n\r\n  // When our special puzzle piece is put on the webpage\r\n  componentDidMount() {\r\n    // Fetch data from the backend when the component appears on the webpage\r\n    this.fetchItems();\r\n  }\r\n\r\n  // Function to fetch items from the backend\r\n  fetchItems() {\r\n    // Update state to show loading state\r\n    this.setState({ loading: true });\r\n\r\n    // Make a GET request to the backend API using Axios\r\n    axios.get('http://localhost:9999/api/volunteers/volunteers')\r\n      .then(response => {\r\n        // Update state with data from the backend\r\n        this.setState({\r\n          items: response.data,  // Store the list of items\r\n          loading: false,        // No longer loading because we got the data\r\n          error: null,           // No errors, everything went smoothly\r\n        });\r\n      })\r\n      .catch(error => {\r\n        // Handle errors and update state accordingly\r\n        this.setState({\r\n          items: [],             // No items because there was an error\r\n          loading: false,        // Not loading anymore\r\n          error: 'Error fetching items from the backend.',  // Store the error message\r\n        });\r\n      });\r\n  }\r\n\r\n  // When our special puzzle piece is told to show itself on the webpage\r\n  render() {\r\n    const { items, loading, error } = this.state;\r\n\r\n    // If we're still waiting for data, show a loading message\r\n    if (loading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    // If there's an error, show an error message\r\n    if (error) {\r\n      return <p>{error}</p>;\r\n    }\r\n\r\n    // If everything is good, show the list of items\r\n    return (\r\n      <div>\r\n        <h2>Item List</h2>\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.id}>{item.name}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemListComponent;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,SAASJ,SAAS,CAAC;EACxC;;EAEAK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;IACA,IAAI,CAACC,KAAK,GAAG;MACXC,KAAK,EAAE,EAAE;MAAQ;MACjBC,OAAO,EAAE,IAAI;MAAI;MACjBC,KAAK,EAAE,IAAI,CAAM;IACnB,CAAC;EACH;;EAEA;EACAC,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;;EAEA;EACAA,UAAUA,CAAA,EAAG;IACX;IACA,IAAI,CAACC,QAAQ,CAAC;MAAEJ,OAAO,EAAE;IAAK,CAAC,CAAC;;IAEhC;IACAR,KAAK,CAACa,GAAG,CAAC,iDAAiD,CAAC,CACzDC,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,IAAI,CAACH,QAAQ,CAAC;QACZL,KAAK,EAAEQ,QAAQ,CAACC,IAAI;QAAG;QACvBR,OAAO,EAAE,KAAK;QAAS;QACvBC,KAAK,EAAE,IAAI,CAAY;MACzB,CAAC,CAAC;IACJ,CAAC,CAAC,CACDQ,KAAK,CAACR,KAAK,IAAI;MACd;MACA,IAAI,CAACG,QAAQ,CAAC;QACZL,KAAK,EAAE,EAAE;QAAc;QACvBC,OAAO,EAAE,KAAK;QAAS;QACvBC,KAAK,EAAE,wCAAwC,CAAG;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;;EAEA;EACAS,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEX,KAAK;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACH,KAAK;;IAE5C;IACA,IAAIE,OAAO,EAAE;MACX,oBAAON,OAAA;QAAAiB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC1B;;IAEA;IACA,IAAId,KAAK,EAAE;MACT,oBAAOP,OAAA;QAAAiB,QAAA,EAAIV;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IACvB;;IAEA;IACA,oBACErB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBrB,OAAA;QAAAiB,QAAA,EACGZ,KAAK,CAACiB,GAAG,CAACC,IAAI,iBACbvB,OAAA;UAAAiB,QAAA,EAAmBM,IAAI,CAACC;QAAI,GAAnBD,IAAI,CAACE,EAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEV;AACF;AAEA,eAAepB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}